Search.setIndex({"docnames": ["attacks", "examples", "extending", "index", "introduction", "output_format", "preprocessing", "safedecisiontree", "safekeras", "safemodel", "saferandomforest", "safesvc"], "filenames": ["attacks.rst", "examples.rst", "extending.rst", "index.rst", "introduction.rst", "output_format.rst", "preprocessing.rst", "safedecisiontree.rst", "safekeras.rst", "safemodel.rst", "saferandomforest.rst", "safesvc.rst"], "titles": ["Attacks", "Examples", "Extending SafeModel", "Welcome to the AI-SDC documentation!", "Introduction", "JSON Output for MIA attacks", "Preprocessing", "SafeDecisionTree", "SafeKerasModel", "Base Class", "SafeRandomForest", "SafeSVC"], "terms": {"exampl": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11], "show": 0, "how": [0, 5], "run": [0, 3, 8, 9], "code": [0, 2], "can": [0, 2, 6], "found": [0, 2], "folder": [0, 6], "calcul": [0, 5, 10], "metric": [0, 5, 8], "aisdc": [0, 6, 7, 8, 9, 10, 11], "auc_p_val": [0, 3], "auc": [0, 5], "float": 0, "n_po": 0, "int": [0, 7, 8, 10], "n_neg": 0, "tupl": [0, 2, 6, 7, 8, 9, 10, 11], "sourc": [0, 2, 4, 6, 7, 8, 9, 10, 11], "comput": [0, 5, 8], "p": [0, 5], "valu": [0, 4, 5, 6, 8, 9], "given": [0, 5, 9], "paramet": [0, 2, 4, 5, 6, 8, 9], "observ": [0, 5], "number": [0, 2, 3, 5, 7, 8], "posit": [0, 5], "neg": 0, "return": [0, 2, 6, 7, 8, 9], "auc_p": 0, "an": [0, 2, 4, 5, 7, 8, 10, 11], "chanc": [0, 5], "auc_std": 0, "standard": [0, 5, 6], "deviat": [0, 5], "null": [0, 9], "diustribut": 0, "mean": [0, 5, 6], "0": [0, 6, 7, 8, 10, 11], "5": [0, 4, 9], "get_metr": [0, 3], "y_pred_proba": 0, "ndarrai": [0, 2, 7, 10, 11], "y_test": 0, "includ": [0, 3], "advantag": 0, "mia": [0, 3, 9], "binari": 0, "implement": [0, 1, 2, 4, 9], "definit": 0, "4": 0, "http": [0, 3], "arxiv": 0, "org": [0, 3], "pdf": 0, "1709": 0, "01604": 0, "which": [0, 5, 6, 8, 10], "i": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11], "also": [0, 3], "tensorflow": [0, 8, 9], "privaci": [0, 2, 7, 8, 9, 10, 11], "github": 0, "com": 0, "np": [0, 2], "test": [0, 2, 5, 7, 9], "data": [0, 3, 5, 6, 7], "label": [0, 6, 8], "shape": [0, 2, 8], "x": [0, 2, 6, 7, 8, 9, 10], "2": [0, 7, 8, 10], "type": [0, 2, 5, 7, 9], "predict": [0, 5], "probabl": [0, 5], "dict": [0, 2, 7, 8, 9, 10, 11], "dictionari": [0, 9], "note": [0, 6, 8, 9, 10], "follow": [0, 5, 6], "true": [0, 2, 5, 8, 9], "rate": [0, 5], "recal": 0, "tpr": [0, 5], "fals": [0, 2, 5, 8, 9], "fpr": [0, 5], "proport": [0, 5], "incorrectli": 0, "classifi": [0, 7, 8, 9, 10, 11], "alarm": 0, "far": 0, "object": [0, 2, 9], "ar": [0, 2, 4, 5, 6, 9], "incorrect": 0, "known": 0, "discoveri": 0, "neag": 0, "tnr": 0, "precis": 0, "ppv": 0, "npv": 0, "fnr": 0, "accuraci": [0, 8], "acc": 0, "f1": 0, "score": 0, "harmon": 0, "get_prob": [0, 3], "clf": 0, "x_test": 0, "arrai": 0, "dtype": [0, 8], "float64": 0, "permute_row": 0, "bool": [0, 2, 7, 8, 9], "model": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11], "dataset": [0, 6, 9], "each": [0, 5, 7, 10], "sampl": [0, 5, 8], "format": [0, 2, 6, 8, 9], "sklearn": [0, 2, 6, 7], "train": [0, 5, 8, 9], "matrix": 0, "boolean": [0, 9], "flag": 0, "indic": [0, 8, 9], "whether": [0, 5, 8, 9], "row": [0, 5, 6], "should": [0, 2, 8], "permut": 0, "list": [0, 2, 5, 8, 9], "If": [0, 5, 9], "set": [0, 5, 6, 8, 9, 10], "must": [0, 2, 4], "suppli": 0, "The": [0, 3, 4, 6, 7, 8, 9, 10], "function": [0, 3, 8, 9], "both": [0, 5, 9], "correspond": 0, "min_max_disc": [0, 3], "y_true": 0, "pred_prob": 0, "x_prop": 0, "1": [0, 3, 4, 5, 6, 7, 9, 10, 11], "log_p": 0, "non": [0, 8], "averag": 0, "case": [0, 3, 9], "method": [0, 3, 4, 6, 7, 8, 9, 10, 11], "consid": [0, 5, 8], "actual": [0, 5, 8], "frequenc": 0, "membership": [0, 9], "amongst": 0, "highest": [0, 5], "lowest": 0, "assess": 0, "confid": [0, 4, 5], "assert": 0, "member": 0, "cannot": [0, 8, 9], "tell": 0, "remain": 0, "90": 0, "thi": [0, 1, 2, 3, 5, 8, 9, 10], "behaviour": 0, "mai": [0, 2, 4, 9], "sinc": [0, 8, 9], "differ": [0, 2, 5], "noisi": 0, "against": 0, "independ": 0, "essenti": 0, "random": [0, 5, 10], "us": [0, 1, 2, 4, 5, 6, 8, 9], "usual": 0, "gaussian": 0, "approxim": 0, "binomi": 0, "low": 0, "high": 0, "success": [0, 5], "some": [0, 2, 6, 8], "y": [0, 2, 6, 7, 8, 9, 10], "yp": 0, "monoton": 0, "transform": 0, "probabilti": 0, "xprop": 0, "logp": 0, "convert": 0, "log": [0, 5, 9], "maxd": 0, "individu": 0, "mind": 0, "mmd": 0, "between": [0, 6], "pval": 0, "hypothesi": 0, "variabl": [0, 5, 6, 8], "choic": 0, "100": [0, 6], "rand": 0, "min_max_desc": 0, "worst_case_attack": 0, "py": [0, 2, 6, 8], "worst": [0, 3, 9], "base": [0, 2, 3, 5, 10], "upon": 0, "store": [0, 2, 5, 6, 7, 10, 11], "two": [0, 7, 8, 9], "csv": [0, 6], "file": [0, 3, 6, 8, 9], "class": [0, 3, 7, 8, 10, 11], "worstcaseattack": [0, 3], "n_rep": [0, 5], "10": [0, 6, 11], "p_thresh": [0, 5], "05": 0, "n_dummy_rep": [0, 5], "train_beta": [0, 5], "test_beta": [0, 5], "test_prop": [0, 5], "n_rows_in": [0, 5], "1000": [0, 11], "n_rows_out": [0, 5], "training_preds_filenam": [0, 5], "option": [0, 3, 8, 9], "str": [0, 2, 6, 7, 8, 9, 10, 11], "none": [0, 2, 7, 8, 9, 10, 11], "test_preds_filenam": [0, 5], "output_dir": 0, "output_worstcas": 0, "report_nam": [0, 5], "report_worstcas": 0, "include_model_correct_featur": [0, 5], "sort_prob": [0, 5], "mia_attack_model": [0, 5], "ani": [0, 3, 7, 8, 9, 10], "ensembl": 0, "_forest": 0, "randomforestclassifi": [0, 5], "mia_attack_model_hyp": [0, 5], "attack_metric_success_nam": [0, 5], "p_higher_auc": 0, "attack_metric_success_thresh": [0, 5], "attack_metric_success_comp_typ": [0, 5], "lte": [0, 5], "attack_metric_success_count_thresh": [0, 5], "attack_fail_fast": [0, 5], "attack_config_json_file_nam": 0, "target_path": 0, "wrap": 0, "target": [0, 5, 6, 9], "programmat": 0, "entri": [0, 5, 6], "point": [0, 9], "To": [0, 8, 9], "when": [0, 5, 9], "ha": [0, 3, 4, 5, 6, 8, 9, 10], "access": [0, 3, 5], "attack_from_prediction_fil": 0, "start": [0, 3], "from": [0, 2, 3, 8, 9, 10], "save": [0, 4, 8, 9], "onli": [0, 5, 8, 9], "avail": [0, 6, 7, 8, 10, 11], "filenam": [0, 9], "specifi": [0, 8, 9], "argument": 0, "provid": [0, 4, 8], "constructor": [0, 8, 9], "attack_from_pr": 0, "train_pr": 0, "test_pr": 0, "train_correct": 0, "test_correct": 0, "param": [0, 2, 4, 8], "self": [0, 2, 9], "arg": [0, 8], "One": 0, "per": [0, 8], "one": [0, 2, 5, 8], "column": [0, 5, 6], "e": [0, 2, 5, 6, 7, 9], "generate_arrai": 0, "numpi": 0, "gener": [0, 3], "baselin": [0, 5], "out": [0, 5, 6], "beta": [0, 5], "beta_valu": 0, "n_row": 0, "make_dummy_data": 0, "make": [0, 2, 8, 9], "dummi": [0, 5], "command": 0, "line": [0, 3], "noth": 0, "make_report": 0, "creat": [0, 2, 5, 8, 9], "output": [0, 3, 8, 9], "structur": [0, 3, 7, 9], "json": [0, 3, 4, 9], "run_attack_rep": 0, "rep": 0, "mia_metrics_dict": 0, "item": [0, 3, 7, 9], "mia_metr": 0, "across": [0, 5], "repetit": [0, 5], "failfast_metric_summari": 0, "failfast": 0, "maintain": [0, 5], "summari": 0, "fail": 0, "main": [0, 2, 3, 6], "pars": 0, "invok": 0, "relev": [0, 9], "automat": [0, 2, 6, 8], "report": [0, 4, 5, 8, 9], "numpyarrayencod": [0, 3], "skipkei": 0, "ensure_ascii": 0, "check_circular": 0, "allow_nan": 0, "sort_kei": 0, "indent": 0, "separ": [0, 9], "default": [0, 8, 9], "encod": 0, "cope": 0, "o": 0, "add_output_to_pdf": [0, 3], "report_dest": 0, "pdf_report": 0, "fpdf": 0, "attack_typ": 0, "append": 0, "content": [0, 2, 9], "alreadi": 0, "exist": [0, 2, 9], "create_json_report": [0, 3], "injest": 0, "other": [0, 2], "tool": 0, "create_lr_report": [0, 3], "lira": [0, 3, 9], "infer": [0, 9], "metadata": [0, 5, 9], "attack_experiment_logg": [0, 5], "experi": [0, 5], "In": [0, 2], "scenario": 0, "have": [0, 2, 5, 6, 9], "attack_instance_logg": [0, 5], "singl": [0, 5, 6, 9], "document": 0, "create_mia_report": [0, 3], "attack_output": 0, "dummy_attack_experiment_logg": 0, "text": 0, "border": 0, "font_siz": 0, "11": 0, "font_styl": 0, "font": 0, "arial": 0, "write": [0, 3, 8, 9], "block": [0, 10], "subtitl": [0, 3], "12": 0, "b": [0, 5], "titl": [0, 3], "24": 0, "likelihood": [0, 9], "2112": 0, "03570": 0, "likelihood_attack": 0, "dummyclassifi": [0, 3], "A": [0, 1, 5, 6, 9], "allow": [0, 4, 8], "work": [0, 3, 6], "test_x": 0, "depend": [0, 2, 9], "second": 0, "predict_proba": 0, "simpli": 0, "liraattack": [0, 3], "n_shadow_model": [0, 5], "outputs_lira": 0, "report_lira": 0, "training_data_filenam": [0, 5], "test_data_filenam": [0, 5], "target_model": [0, 5], "target_model_hyp": [0, 5], "n_shadow_rows_confidences_min": [0, 5], "shadow_models_fail_fast": 0, "instanc": [0, 5, 8], "need": [0, 2, 8], "x_train": 0, "y_train": 0, "attack_from_config": 0, "tun": 0, "inform": [0, 9], "contain": [0, 2, 6, 9], "all": [0, 5, 6, 8], "run_scenario_from_pr": 0, "shadow_clf": 0, "baseestim": 0, "x_target_train": 0, "iter": [0, 5], "y_target_train": 0, "target_train_pr": 0, "x_shadow_train": 0, "y_shadow_train": 0, "shadow_train_pr": 0, "offlin": 0, "version": [0, 2, 8, 9, 10], "see": 0, "6": 0, "top": 0, "detail": [0, 1, 4], "form": [0, 8, 9], "shadow": [0, 5], "hyper": [0, 5], "been": [0, 3, 6, 8, 9, 10], "wa": [0, 3, 5, 8, 9, 10], "were": 0, "produc": [0, 8], "mia_scor": 0, "belong": 0, "mia_label": 0, "mia_cl": 0, "directli": [0, 9], "compat": 0, "load_breast_canc": 0, "return_x_i": 0, "as_fram": 0, "train_x": 0, "train_i": 0, "test_i": 0, "train_test_split": 0, "test_siz": 0, "stratifi": 0, "rf": 0, "min_samples_leaf": [0, 2, 4, 5, 9], "min_samples_split": [0, 2], "fit": [0, 3, 4, 7, 8, 9, 10, 11], "mia_test_prob": 0, "mia_test_label": 0, "mia_clf": 0, "likelihood_scenario": 0, "max_depth": [0, 2, 5], "setup_example_data": 0, "config": [0, 3], "intend": 0, "user": [0, 4, 6, 8, 9], "thei": [0, 2, 6], "would": [0, 10], "setup": 0, "own": [0, 8], "explor": 1, "benefit": [1, 10], "safemodel": [1, 3, 7, 8, 9, 10, 11], "decis": [1, 2, 7], "tree": [1, 2, 7, 10], "guid": 1, "packag": [2, 4], "open": [2, 4], "wrapper": [2, 4, 8, 9], "common": [2, 4, 6], "machin": [2, 4, 9], "learn": [2, 4, 9], "It": [2, 4], "comment": 2, "numpydoc": 2, "so": 2, "render": 2, "step": 2, "new": 2, "new_model_templ": 2, "inherit": 2, "basic": 2, "cp": 2, "xgboost": 2, "safegradientboost": 2, "gradientboostingclassifi": 2, "protect": [2, 7, 8, 9, 10, 11], "safe": [2, 9], "limit": [2, 8], "pearamet": 2, "written": 2, "javascript": 2, "notat": 2, "newli": [2, 8], "reflect": 2, "basemodel_paramnam": 2, "safemodeltomakesaf": 2, "def": 2, "kwarg": [2, 7, 8, 10, 11], "appli": [2, 5, 9], "constraint": [2, 9], "edit": 2, "just": [2, 9], "valid": 2, "you": 2, "the_kwd": 2, "kei": [2, 5, 9], "val": [2, 9], "modeltomakesaf": 2, "model_typ": [2, 4, 9], "super": [2, 9], "preliminary_check": [2, 9], "apply_constraint": [2, 9], "verbos": [2, 8, 9], "model_save_fil": [2, 4], "base_estimator_": 2, "timestamp": 2, "examine_seperately_item": 2, "base_estim": 2, "estimators_": 2, "For": [2, 5], "extract": 2, "man": 2, "page": [2, 3], "saferandomforest": [2, 3], "n_estim": 2, "criterion": 2, "min_weight_fraction_leaf": 2, "max_featur": 2, "max_leaf_nod": 2, "min_impurity_decreas": 2, "bootstrap": 2, "oob_scor": 2, "n_job": 2, "random_st": 2, "warm_start": 2, "class_weight": 2, "ccp_alpha": 2, "max_sampl": 2, "datastructur": [2, 9], "care": 2, "taken": 2, "ensur": 2, "chang": [2, 8, 9], "after": 2, "call": [2, 4, 8, 9, 10], "handl": 2, "safedecisiontre": [2, 3], "do": [2, 4, 5, 6, 7, 8, 10, 11], "k_anonym": 2, "get_k_anonym": [2, 10], "saved_model": [2, 9], "deepcopi": 2, "__dict__": [2, 9], "doc": 2, "directori": 2, "rst": 2, "Then": 2, "index": [2, 3], "although": 2, "extens": [2, 9], "requir": [2, 5, 6], "g": [2, 7, 9], "link": [2, 5], "cd": 2, "corefunction": 2, "suit": 2, "ai": [2, 5, 6], "sdc": [2, 5, 6], "being": [2, 5], "more": [2, 4, 9], "helpfunct": 2, "safekera": [2, 3, 8], "help": 2, "specif": [2, 3, 5, 7, 9, 10, 11], "neural": 2, "network": 2, "same_weight": [2, 3, 8], "m1": [2, 8], "m2": [2, 8], "len": 2, "layer": [2, 8], "numlay": 2, "rang": [2, 5, 9], "m1layer": 2, "get_weight": 2, "m2layer": 2, "f": 2, "same": [2, 8, 9, 10], "size": [2, 10], "dim": 2, "m1d": 2, "m2d": 2, "print": 2, "array_equ": 2, "dimens": 2, "weight": [2, 8], "match": 2, "introduct": 3, "what": 3, "preprocess": 3, "datanotavail": [3, 6], "unknowndataset": [3, 6], "get_data_sklearn": [3, 6], "attack": [3, 8, 9], "check_equ": [3, 9], "check_max": [3, 9], "check_min": [3, 9], "check_typ": [3, 9], "safedecisiontreeclassifi": [3, 7], "decision_tree_internal_trees_are_equ": [3, 7], "decision_trees_are_equ": [3, 7], "get_tree_k_anonym": [3, 7], "saferandomforestclassifi": [3, 9, 10], "safekerasmodel": 3, "check_dp_us": [3, 8], "check_checkpoint_equ": [3, 8], "check_optimizer_allow": [3, 8], "check_optimizer_is_dp": [3, 8], "load_safe_keras_model": [3, 8], "same_config": [3, 8], "safesvc": 3, "full": 3, "length": 3, "tutori": 3, "quick": 3, "notebook": [3, 7, 8, 10, 11], "extend": 3, "modular": 3, "design": [3, 4], "copi": [3, 8, 9], "templat": 3, "defin": [3, 9, 10], "safer": 3, "updat": [3, 8], "rule": [3, 9], "__init__": [3, 9], "paramnam": 3, "ignore_item": [3, 9], "examine_separ": [3, 9], "add": 3, "check": [3, 7, 8, 9, 10, 11], "unusu": 3, "overrid": [3, 8], "sphinx": 3, "pytest": 3, "confirm": 3, "core": 3, "helper": 3, "modul": [3, 8, 9], "search": 3, "uk": 3, "research": [3, 4, 9], "innov": 3, "grant": 3, "mc_pc_21033": 3, "part": 3, "phase": 3, "dare": 3, "analyt": 3, "environ": [3, 4], "programm": 3, "dareuk": 3, "deliv": 3, "partnership": 3, "hdr": 3, "adruk": 3, "project": [3, 6], "guidelin": 3, "resourc": 3, "trust": [3, 4], "graimatt": 3, "support": [3, 8, 11], "mrc": 3, "epsrc": 3, "mr": 3, "s010351": 3, "pictur": 3, "tre": [4, 9], "where": [4, 5], "disclosur": [4, 9], "control": 4, "aim": 4, "give": 4, "greater": [4, 5], "compliant": 4, "feedback": [4, 8], "through": 4, "parseabl": 4, "checkfil": 4, "andi": 4, "decisiontreeclassifi": [4, 7], "unsaf": [4, 8], "pkl": [4, 9], "warn": [4, 8, 9], "present": [4, 5, 9], "risk": [4, 9], "n": [4, 5], "para": 4, "meter": 4, "identifi": [4, 5, 9], "less": [4, 5, 9], "than": [4, 5, 9], "recommend": [4, 8, 9], "min": [4, 9], "releas": 4, "reason": 4, "eter": 4, "error": 4, "delet": 4, "recommendat": 4, "ion": 4, "we": [5, 6, 8, 9], "standaridis": 5, "worst_cas": [5, 9], "possibl": [5, 8, 9], "under": [5, 8], "compon": 5, "log_id": 5, "uniqu": 5, "id": [5, 9], "log_tim": 5, "time": 5, "standardis": [5, 6], "relat": 5, "logger": 5, "experiment_detail": 5, "subset": 5, "threshold": [5, 7], "determin": [5, 9], "signific": 5, "thing": 5, "auc_p_valu": 5, "pdif_val": 5, "distribut": [5, 8], "name": [5, 6, 8, 9], "keep": 5, "inclus": 5, "addit": [5, 9], "featur": [5, 6, 7, 10], "hold": 5, "made": 5, "correct": 5, "sort": 5, "combin": 5, "pred": 5, "first": 5, "sucha": 5, "min_sample_split": 5, "etc": [5, 7], "measur": 5, "comparison": [5, 9], "oper": [5, 9], "gte": 5, "equal": [5, 7, 9], "gt": 5, "lt": 5, "eq": 5, "not_eq": 5, "counter": 5, "record": [5, 8, 10], "mani": 5, "fulfil": 5, "criteria": 5, "stop": 5, "earlier": 5, "satisfi": 5, "worstcas": 5, "global_metr": 5, "global": 5, "null_auc_3sd_rang": 5, "three": 5, "p_valu": 5, "n_sig_auc_p_v": 5, "n_sig_auc_p_vals_correct": 5, "n_sig_pdif_v": 5, "pdif": 5, "n_sig_pdif_vals_correct": 5, "baseline_global_metr": 5, "instance_0": 5, "n_pos_test_exampl": 5, "n_neg_test_exampl": 5, "instance_1": 5, "similar": 5, "instance_n": 5, "repres": 5, "attack_metric_failfast_summari": 5, "succcess_count": 5, "demonstr": 5, "fail_count": 5, "dummy_attack_experiments_logg": 5, "dummy_attack_metrics_experiment_0": 5, "dummy_attack_metrics_experiment_1": 5, "dummy_attack_metrics_experiment_n": 5, "minimum": [5, 9, 10], "auc_sig": 5, "pdif_sig": 5, "n_shadow_models_train": 5, "like": 5, "worst_case_attack_exampl": 5, "lira_attack_exampl": 5, "explain": 5, "most": 5, "configur": 5, "loader": 6, "handler": 6, "pull": 6, "perform": 6, "appropri": [6, 8, 9], "pre": 6, "process": 6, "except": 6, "rais": 6, "ask": 6, "download": 6, "pass": 6, "don": 6, "t": 6, "recognis": 6, "dataset_nam": 6, "data_fold": 6, "home": 6, "runner": 6, "datafram": 6, "sensibl": 6, "panda": 6, "load": [6, 8], "local": 6, "pd": 6, "input": [6, 8], "mimic2": 6, "iaccd": 6, "hospit": 6, "mortal": 6, "medic": 6, "mnist": 6, "ab": 6, "v": 6, "br": 6, "500": 6, "indian": 6, "liver": 6, "texa": 6, "synth": 6, "ae": 6, "small": 6, "nurseri": 6, "iri": 6, "box": 6, "via": [6, 9], "normalis": 6, "ad": [6, 8], "prefix": 6, "zero": 6, "unit": 6, "varianc": 6, "minmax": 6, "round": 6, "continu": 6, "3dp": 6, "These": [6, 9], "nest": 6, "python": [7, 8, 9, 10, 11], "here": [7, 8, 10, 11], "attribut": [7, 8, 9, 10], "feature_importances_": [7, 10], "import": [7, 10], "n_features_": [7, 10], "deprec": [7, 8, 10], "remov": [7, 10], "additional_check": [7, 9, 10, 11], "curr_separ": [7, 9, 10, 11], "saved_separ": [7, 9, 10, 11], "k": [7, 10], "anonym": [7, 10], "tree1_tre": 7, "tree2_tre": 7, "intern": 7, "_tree": 7, "node": [7, 8], "tree1": 7, "tree2": 7, "compar": [7, 8, 9], "estim": 7, "thetre": 7, "smallest": 7, "leaf": [7, 10], "jim": 8, "smith": 8, "andrew": 8, "mccarti": 8, "richard": 8, "preen": 8, "uw": 8, "2022": 8, "around": 8, "tf": 8, "kera": [8, 9], "8": 8, "disabl": 8, "pylont": 8, "about": 8, "necessarili": 8, "complex": [8, 9], "activity_regular": 8, "regular": 8, "compute_dtyp": 8, "": 8, "distribute_reduction_method": 8, "emploi": 8, "reduc": 8, "replica": 8, "dure": 8, "distribute_strategi": 8, "strategi": 8, "dtype_polici": 8, "polici": 8, "associ": 8, "dynam": 8, "eager": 8, "inbound_nod": 8, "api": 8, "upstream": 8, "retriev": 8, "tensor": 8, "input_mask": 8, "mask": 8, "input_shap": 8, "input_spec": 8, "inputspec": 8, "describ": [8, 9], "jit_compil": 8, "compil": 8, "xla": 8, "loss": 8, "add_loss": 8, "add_metr": 8, "metrics_nam": 8, "displai": 8, "string": [8, 9], "name_scop": 8, "non_trainable_vari": 8, "sequenc": 8, "trainabl": 8, "its": 8, "submodul": 8, "non_trainable_weight": 8, "track": 8, "outbound_nod": 8, "downstream": 8, "output_mask": 8, "output_shap": 8, "run_eagerli": 8, "settabl": 8, "eagerli": 8, "state_upd": 8, "NOT": 8, "state": 8, "sub": 8, "supports_mask": 8, "compute_mask": 8, "trainable_vari": 8, "trainable_weight": 8, "variable_dtyp": 8, "alia": 8, "__call__": 8, "build_from_config": 8, "compile_from_config": 8, "get_build_config": 8, "get_compile_config": 8, "reset_st": 8, "check_epsilon": 8, "num_sampl": 8, "batch_siz": 8, "epoch": 8, "level": [8, 9], "guarante": 8, "within": [8, 9], "optim": [8, 9], "categorical_crossentropi": 8, "replac": 8, "optimis": 8, "dp": 8, "variant": 8, "necessari": 8, "opt": 8, "becaus": 8, "explicitli": 8, "deal": [8, 9], "dp_epsilon_met": 8, "num_exampl": 8, "epsilon": 8, "suffici": 8, "differenti": 8, "validation_data": 8, "refine_epsilon": 8, "extra": 8, "ii": 8, "doe": 8, "iia": 8, "without": 8, "iii": 8, "iv": 8, "final": 8, "posthoc_check": [8, 9], "last": [8, 9], "meet": 8, "undefin": [8, 9], "No": [8, 9], "deliber": [8, 9], "exclud": [8, 9], "prevent": [8, 9], "restart": [8, 9], "thu": [8, 9], "back": [8, 9], "door": [8, 9], "v1": 8, "v2": 8, "checkpoint": 8, "save_model": 8, "On": 8, "assumpt": 8, "go": 8, "frozen": 8, "architectur": 8, "our": 8, "white": 8, "read": [8, 9], "could": 8, "offer": 8, "haveth": 8, "net": 8, "prototyp": 9, "saferfmodel": 9, "request_releas": 9, "path": 9, "ext": 9, "ignor": 9, "examine_separately_item": 9, "examin": 9, "__apply_constraint": 9, "cur_val": 9, "__check_model_param": 9, "current": 9, "violat": 9, "fix": 9, "__check_model_param_and": 9, "logic": 9, "AND": 9, "__check_model_param_or": 9, "OR": 9, "__get_constraint": 9, "get": 9, "master": 9, "__str__": 9, "descript": 9, "especi": 9, "usernam": 9, "__weakref__": 9, "weak": 9, "refer": 9, "placehold": 9, "posthoc": 9, "msg": 9, "messag": 9, "disclos": 9, "potenti": 9, "sure": 9, "examine_seperate_item": 9, "curr_val": 9, "saved_v": 9, "get_current_and_saved_model": 9, "split": 9, "get_param": 9, "deep": 9, "restrict": 9, "those": 9, "expect": 9, "interf": 9, "increas": 9, "upheld": 9, "checker": 9, "sav": 9, "run_attack": 9, "attack_nam": 9, "outputdir": 9, "re": 9, "result": 9, "ratio": 9, "overload": 9, "safekerasclassif": 9, "maximum": 9, "forest": 10, "impur": 10, "refactor": 10, "simpler": 10, "perhap": 10, "never": 10, "That": 10, "appear": 10, "everi": 10, "vector": 11, "c": 11, "gamma": 11, "scale": 11, "dhat": 11, "ep": 11, "svc": 11, "train_featur": 11, "train_label": 11}, "objects": {"aisdc.attacks": [[0, 0, 0, "-", "likelihood_attack"], [0, 0, 0, "-", "report"], [0, 0, 0, "-", "worst_case_attack"]], "aisdc.attacks.likelihood_attack": [[0, 1, 1, "", "DummyClassifier"], [0, 1, 1, "", "LIRAAttack"], [0, 3, 1, "", "main"]], "aisdc.attacks.likelihood_attack.DummyClassifier": [[0, 2, 1, "", "predict"], [0, 2, 1, "", "predict_proba"]], "aisdc.attacks.likelihood_attack.LIRAAttack": [[0, 2, 1, "", "attack"], [0, 2, 1, "", "attack_from_config"], [0, 2, 1, "", "example"], [0, 2, 1, "", "make_report"], [0, 2, 1, "", "run_scenario_from_preds"], [0, 2, 1, "", "setup_example_data"]], "aisdc.attacks.report": [[0, 1, 1, "", "NumpyArrayEncoder"], [0, 3, 1, "", "add_output_to_pdf"], [0, 3, 1, "", "create_json_report"], [0, 3, 1, "", "create_lr_report"], [0, 3, 1, "", "create_mia_report"], [0, 3, 1, "", "line"], [0, 3, 1, "", "subtitle"], [0, 3, 1, "", "title"]], "aisdc.attacks.report.NumpyArrayEncoder": [[0, 2, 1, "", "default"]], "aisdc.attacks.worst_case_attack": [[0, 1, 1, "", "WorstCaseAttack"], [0, 3, 1, "", "main"]], "aisdc.attacks.worst_case_attack.WorstCaseAttack": [[0, 2, 1, "", "attack"], [0, 2, 1, "", "attack_from_prediction_files"], [0, 2, 1, "", "attack_from_preds"], [0, 2, 1, "", "generate_arrays"], [0, 2, 1, "", "make_dummy_data"], [0, 2, 1, "", "make_report"], [0, 2, 1, "", "run_attack_reps"]], "aisdc": [[0, 0, 0, "-", "metrics"]], "aisdc.metrics": [[0, 3, 1, "", "auc_p_val"], [0, 3, 1, "", "get_metrics"], [0, 3, 1, "", "get_probabilities"], [0, 3, 1, "", "min_max_disc"]], "aisdc.preprocessing": [[6, 0, 0, "-", "loaders"]], "aisdc.preprocessing.loaders": [[6, 4, 1, "", "DataNotAvailable"], [6, 4, 1, "", "UnknownDataset"], [6, 3, 1, "", "get_data_sklearn"]], "aisdc.safemodel.classifiers": [[7, 0, 0, "-", "safedecisiontreeclassifier"], [8, 0, 0, "-", "safekeras"], [10, 0, 0, "-", "saferandomforestclassifier"], [11, 0, 0, "-", "safesvc"]], "aisdc.safemodel.classifiers.safedecisiontreeclassifier": [[7, 1, 1, "", "SafeDecisionTreeClassifier"], [7, 3, 1, "", "decision_tree_internal_trees_are_equal"], [7, 3, 1, "", "decision_trees_are_equal"], [7, 3, 1, "", "get_tree_k_anonymity"]], "aisdc.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier": [[7, 2, 1, "", "additional_checks"], [7, 2, 1, "", "fit"]], "aisdc.safemodel.classifiers.safekeras": [[8, 1, 1, "", "SafeKerasModel"], [8, 3, 1, "", "check_DP_used"], [8, 3, 1, "", "check_checkpoint_equality"], [8, 3, 1, "", "check_optimizer_allowed"], [8, 3, 1, "", "check_optimizer_is_DP"], [8, 3, 1, "", "load_safe_keras_model"], [8, 3, 1, "", "same_configs"], [8, 3, 1, "", "same_weights"]], "aisdc.safemodel.classifiers.safekeras.SafeKerasModel": [[8, 2, 1, "", "check_epsilon"], [8, 2, 1, "", "compile"], [8, 2, 1, "", "dp_epsilon_met"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "posthoc_check"], [8, 2, 1, "", "save"]], "aisdc.safemodel.classifiers.saferandomforestclassifier": [[10, 1, 1, "", "SafeRandomForestClassifier"]], "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier": [[10, 2, 1, "", "additional_checks"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_k_anonymity"]], "aisdc.safemodel.classifiers.safesvc": [[11, 1, 1, "", "SafeSVC"]], "aisdc.safemodel.classifiers.safesvc.SafeSVC": [[11, 2, 1, "", "additional_checks"], [11, 2, 1, "", "fit"]], "aisdc.safemodel": [[9, 0, 0, "-", "safemodel"]], "aisdc.safemodel.safemodel": [[9, 1, 1, "", "SafeModel"], [9, 3, 1, "", "check_equal"], [9, 3, 1, "", "check_max"], [9, 3, 1, "", "check_min"], [9, 3, 1, "", "check_type"]], "aisdc.safemodel.safemodel.SafeModel": [[9, 2, 1, "", "__apply_constraints"], [9, 2, 1, "", "__check_model_param"], [9, 2, 1, "", "__check_model_param_and"], [9, 2, 1, "", "__check_model_param_or"], [9, 2, 1, "", "__get_constraints"], [9, 2, 1, "", "__init__"], [9, 2, 1, "", "__str__"], [9, 5, 1, "", "__weakref__"], [9, 2, 1, "", "additional_checks"], [9, 2, 1, "", "examine_seperate_items"], [9, 2, 1, "", "get_current_and_saved_models"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "posthoc_check"], [9, 2, 1, "", "preliminary_check"], [9, 2, 1, "", "request_release"], [9, 2, 1, "", "run_attack"], [9, 2, 1, "", "save"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"attack": [0, 5], "exampl": 1, "safedecisiontre": [1, 7], "full": 1, "length": 1, "tutori": 1, "saferandomforest": [1, 10], "quick": 1, "start": 1, "notebook": 1, "safesvc": [1, 11], "safekera": 1, "extend": 2, "safemodel": [2, 4], "modular": 2, "design": 2, "copi": 2, "The": 2, "templat": 2, "defin": 2, "safer": 2, "class": [2, 9], "updat": 2, "rule": 2, "json": [2, 5], "file": [2, 5], "__init__": 2, "method": 2, "paramnam": 2, "ignore_item": 2, "examine_separ": 2, "item": 2, "add": 2, "check": 2, "ani": 2, "unusu": 2, "data": 2, "structur": [2, 5], "overrid": 2, "fit": 2, "function": 2, "sphinx": 2, "document": [2, 3], "write": 2, "pytest": 2, "confirm": 2, "core": 2, "includ": 2, "option": 2, "helper": 2, "welcom": 3, "ai": 3, "sdc": 3, "api": 3, "refer": 3, "content": 3, "indic": 3, "tabl": 3, "fund": 3, "statement": 3, "introduct": 4, "what": 4, "i": 4, "output": 5, "mia": 5, "gener": 5, "worst": 5, "case": 5, "lira": 5, "run": 5, "from": 5, "config": 5, "preprocess": 6, "safekerasmodel": 8, "base": 9}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Attacks": [[0, "attacks"]], "Examples": [[1, "examples"]], "SafeDecisionTree Full Length Tutorial": [[1, "safedecisiontree-full-length-tutorial"]], "SafeRandomForest Quick Start Notebook": [[1, "saferandomforest-quick-start-notebook"]], "SafeSVC Quick Start Notebook": [[1, "safesvc-quick-start-notebook"]], "SafeKeras Quick Start Notebook": [[1, "safekeras-quick-start-notebook"]], "Extending SafeModel": [[2, "extending-safemodel"]], "Modular Design": [[2, "modular-design"]], "Copy The Template": [[2, "copy-the-template"]], "Define the Safer Class": [[2, "define-the-safer-class"]], "Update rules.json file": [[2, "update-rules-json-file"]], "Update the __init__ method with paramnames, ignore_items, and examine_separately items": [[2, "update-the-init-method-with-paramnames-ignore-items-and-examine-separately-items"]], "Add checks for any unusual data structures": [[2, "add-checks-for-any-unusual-data-structures"]], "Override the fit() function": [[2, "override-the-fit-function"]], "Update Sphinx documentation": [[2, "update-sphinx-documentation"]], "Write pytests to confirm core functionality": [[2, "write-pytests-to-confirm-core-functionality"]], "Include any optional helper functions": [[2, "include-any-optional-helper-functions"]], "Welcome to the AI-SDC documentation!": [[3, "welcome-to-the-ai-sdc-documentation"]], "API Reference": [[3, "api-reference"]], "Contents:": [[3, null]], "Indices and tables": [[3, "indices-and-tables"]], "Funding Statement": [[3, "funding-statement"]], "Introduction": [[4, "introduction"]], "What is safemodel?": [[4, "what-is-safemodel"]], "JSON Output for MIA attacks": [[5, "json-output-for-mia-attacks"]], "General Structure": [[5, "general-structure"]], "Worst-Case Attack": [[5, "worst-case-attack"]], "LIRA Attack": [[5, "lira-attack"]], "Running MIA Attacks from Config File": [[5, "running-mia-attacks-from-config-file"]], "Preprocessing": [[6, "module-aisdc.preprocessing.loaders"]], "SafeDecisionTree": [[7, "safedecisiontree"]], "SafeKerasModel": [[8, "safekerasmodel"]], "Base Class": [[9, "module-aisdc.safemodel.safemodel"]], "SafeRandomForest": [[10, "saferandomforest"]], "SafeSVC": [[11, "safesvc"]]}, "indexentries": {"dummyclassifier (class in aisdc.attacks.likelihood_attack)": [[0, "aisdc.attacks.likelihood_attack.DummyClassifier"]], "liraattack (class in aisdc.attacks.likelihood_attack)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack"]], "numpyarrayencoder (class in aisdc.attacks.report)": [[0, "aisdc.attacks.report.NumpyArrayEncoder"]], "worstcaseattack (class in aisdc.attacks.worst_case_attack)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack"]], "add_output_to_pdf() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.add_output_to_pdf"]], "aisdc.attacks.likelihood_attack": [[0, "module-aisdc.attacks.likelihood_attack"]], "aisdc.attacks.report": [[0, "module-aisdc.attacks.report"]], "aisdc.attacks.worst_case_attack": [[0, "module-aisdc.attacks.worst_case_attack"]], "aisdc.metrics": [[0, "module-aisdc.metrics"]], "attack() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.attack"]], "attack() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.attack"]], "attack_from_config() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.attack_from_config"]], "attack_from_prediction_files() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.attack_from_prediction_files"]], "attack_from_preds() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.attack_from_preds"]], "auc_p_val() (in module aisdc.metrics)": [[0, "aisdc.metrics.auc_p_val"]], "create_json_report() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.create_json_report"]], "create_lr_report() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.create_lr_report"]], "create_mia_report() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.create_mia_report"]], "default() (aisdc.attacks.report.numpyarrayencoder method)": [[0, "aisdc.attacks.report.NumpyArrayEncoder.default"]], "example() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.example"]], "generate_arrays() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.generate_arrays"]], "get_metrics() (in module aisdc.metrics)": [[0, "aisdc.metrics.get_metrics"]], "get_probabilities() (in module aisdc.metrics)": [[0, "aisdc.metrics.get_probabilities"]], "line() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.line"]], "main() (in module aisdc.attacks.likelihood_attack)": [[0, "aisdc.attacks.likelihood_attack.main"]], "main() (in module aisdc.attacks.worst_case_attack)": [[0, "aisdc.attacks.worst_case_attack.main"]], "make_dummy_data() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.make_dummy_data"]], "make_report() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.make_report"]], "make_report() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.make_report"]], "min_max_disc() (in module aisdc.metrics)": [[0, "aisdc.metrics.min_max_disc"]], "module": [[0, "module-aisdc.attacks.likelihood_attack"], [0, "module-aisdc.attacks.report"], [0, "module-aisdc.attacks.worst_case_attack"], [0, "module-aisdc.metrics"], [6, "module-aisdc.preprocessing.loaders"], [7, "module-aisdc.safemodel.classifiers.safedecisiontreeclassifier"], [8, "module-aisdc.safemodel.classifiers.safekeras"], [9, "module-aisdc.safemodel.safemodel"], [10, "module-aisdc.safemodel.classifiers.saferandomforestclassifier"], [11, "module-aisdc.safemodel.classifiers.safesvc"]], "predict() (aisdc.attacks.likelihood_attack.dummyclassifier method)": [[0, "aisdc.attacks.likelihood_attack.DummyClassifier.predict"]], "predict_proba() (aisdc.attacks.likelihood_attack.dummyclassifier method)": [[0, "aisdc.attacks.likelihood_attack.DummyClassifier.predict_proba"]], "run_attack_reps() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.run_attack_reps"]], "run_scenario_from_preds() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.run_scenario_from_preds"]], "setup_example_data() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.setup_example_data"]], "subtitle() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.subtitle"]], "title() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.title"]], "datanotavailable": [[6, "aisdc.preprocessing.loaders.DataNotAvailable"]], "unknowndataset": [[6, "aisdc.preprocessing.loaders.UnknownDataset"]], "aisdc.preprocessing.loaders": [[6, "module-aisdc.preprocessing.loaders"]], "get_data_sklearn() (in module aisdc.preprocessing.loaders)": [[6, "aisdc.preprocessing.loaders.get_data_sklearn"]], "safedecisiontreeclassifier (class in aisdc.safemodel.classifiers.safedecisiontreeclassifier)": [[7, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier"]], "additional_checks() (aisdc.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[7, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.additional_checks"]], "aisdc.safemodel.classifiers.safedecisiontreeclassifier": [[7, "module-aisdc.safemodel.classifiers.safedecisiontreeclassifier"]], "decision_tree_internal_trees_are_equal() (in module aisdc.safemodel.classifiers.safedecisiontreeclassifier)": [[7, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.decision_tree_internal_trees_are_equal"]], "decision_trees_are_equal() (in module aisdc.safemodel.classifiers.safedecisiontreeclassifier)": [[7, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.decision_trees_are_equal"]], "fit() (aisdc.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[7, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.fit"]], "get_tree_k_anonymity() (in module aisdc.safemodel.classifiers.safedecisiontreeclassifier)": [[7, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.get_tree_k_anonymity"]], "safekerasmodel (class in aisdc.safemodel.classifiers.safekeras)": [[8, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel"]], "aisdc.safemodel.classifiers.safekeras": [[8, "module-aisdc.safemodel.classifiers.safekeras"]], "check_dp_used() (in module aisdc.safemodel.classifiers.safekeras)": [[8, "aisdc.safemodel.classifiers.safekeras.check_DP_used"]], "check_checkpoint_equality() (in module aisdc.safemodel.classifiers.safekeras)": [[8, "aisdc.safemodel.classifiers.safekeras.check_checkpoint_equality"]], "check_epsilon() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[8, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.check_epsilon"]], "check_optimizer_allowed() (in module aisdc.safemodel.classifiers.safekeras)": [[8, "aisdc.safemodel.classifiers.safekeras.check_optimizer_allowed"]], "check_optimizer_is_dp() (in module aisdc.safemodel.classifiers.safekeras)": [[8, "aisdc.safemodel.classifiers.safekeras.check_optimizer_is_DP"]], "compile() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[8, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.compile"]], "dp_epsilon_met() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[8, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.dp_epsilon_met"]], "fit() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[8, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.fit"]], "load_safe_keras_model() (in module aisdc.safemodel.classifiers.safekeras)": [[8, "aisdc.safemodel.classifiers.safekeras.load_safe_keras_model"]], "posthoc_check() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[8, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.posthoc_check"]], "same_configs() (in module aisdc.safemodel.classifiers.safekeras)": [[8, "aisdc.safemodel.classifiers.safekeras.same_configs"]], "same_weights() (in module aisdc.safemodel.classifiers.safekeras)": [[8, "aisdc.safemodel.classifiers.safekeras.same_weights"]], "save() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[8, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.save"]], "safemodel (class in aisdc.safemodel.safemodel)": [[9, "aisdc.safemodel.safemodel.SafeModel"]], "__apply_constraints() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.__apply_constraints"]], "__check_model_param() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.__check_model_param"]], "__check_model_param_and() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.__check_model_param_and"]], "__check_model_param_or() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.__check_model_param_or"]], "__get_constraints() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.__get_constraints"]], "__init__() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.__init__"]], "__str__() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.__str__"]], "__weakref__ (aisdc.safemodel.safemodel.safemodel attribute)": [[9, "aisdc.safemodel.safemodel.SafeModel.__weakref__"]], "additional_checks() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.additional_checks"]], "aisdc.safemodel.safemodel": [[9, "module-aisdc.safemodel.safemodel"]], "check_equal() (in module aisdc.safemodel.safemodel)": [[9, "aisdc.safemodel.safemodel.check_equal"]], "check_max() (in module aisdc.safemodel.safemodel)": [[9, "aisdc.safemodel.safemodel.check_max"]], "check_min() (in module aisdc.safemodel.safemodel)": [[9, "aisdc.safemodel.safemodel.check_min"]], "check_type() (in module aisdc.safemodel.safemodel)": [[9, "aisdc.safemodel.safemodel.check_type"]], "examine_seperate_items() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.examine_seperate_items"]], "get_current_and_saved_models() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.get_current_and_saved_models"]], "get_params() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.get_params"]], "posthoc_check() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.posthoc_check"]], "preliminary_check() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.preliminary_check"]], "request_release() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.request_release"]], "run_attack() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.run_attack"]], "save() (aisdc.safemodel.safemodel.safemodel method)": [[9, "aisdc.safemodel.safemodel.SafeModel.save"]], "saferandomforestclassifier (class in aisdc.safemodel.classifiers.saferandomforestclassifier)": [[10, "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier"]], "additional_checks() (aisdc.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[10, "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.additional_checks"]], "aisdc.safemodel.classifiers.saferandomforestclassifier": [[10, "module-aisdc.safemodel.classifiers.saferandomforestclassifier"]], "fit() (aisdc.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[10, "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.fit"]], "get_k_anonymity() (aisdc.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[10, "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_k_anonymity"]], "safesvc (class in aisdc.safemodel.classifiers.safesvc)": [[11, "aisdc.safemodel.classifiers.safesvc.SafeSVC"]], "additional_checks() (aisdc.safemodel.classifiers.safesvc.safesvc method)": [[11, "aisdc.safemodel.classifiers.safesvc.SafeSVC.additional_checks"]], "aisdc.safemodel.classifiers.safesvc": [[11, "module-aisdc.safemodel.classifiers.safesvc"]], "fit() (aisdc.safemodel.classifiers.safesvc.safesvc method)": [[11, "aisdc.safemodel.classifiers.safesvc.SafeSVC.fit"]]}})