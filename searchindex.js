Search.setIndex({"docnames": ["attacks", "examples", "extending", "index", "introduction", "preprocessing", "safedecisiontree", "safekeras", "safemodel", "saferandomforest"], "filenames": ["attacks.rst", "examples.rst", "extending.rst", "index.rst", "introduction.rst", "preprocessing.rst", "safedecisiontree.rst", "safekeras.rst", "safemodel.rst", "saferandomforest.rst"], "titles": ["Attacks", "Examples", "Extending SafeModel", "Welcome to the AI-SDC documentation!", "Introduction", "Preprocessing", "SafeDecisionTree", "SafeKerasModel", "Base Class", "SafeRandomForest"], "terms": {"exampl": [0, 2, 3, 5, 6, 7, 8, 9], "show": 0, "how": 0, "run": [0, 7, 8], "code": [0, 2], "can": [0, 2, 5], "found": [0, 2], "folder": [0, 5], "calcul": [0, 9], "metric": [0, 7], "aisdc": [0, 5, 6, 7, 8, 9], "auc_p_val": [0, 3], "auc": 0, "float": 0, "n_po": 0, "int": [0, 6, 7, 9], "n_neg": 0, "tupl": [0, 2, 5, 6, 7, 8, 9], "sourc": [0, 2, 4, 5, 6, 7, 8, 9], "comput": [0, 7], "p": 0, "valu": [0, 4, 5, 7, 8], "given": [0, 8], "paramet": [0, 2, 4, 5, 7, 8], "observ": 0, "number": [0, 2, 3, 6, 7], "posit": 0, "neg": 0, "return": [0, 2, 5, 6, 7, 8], "auc_p": 0, "an": [0, 2, 4, 6, 7, 9], "chanc": 0, "auc_std": 0, "standard": [0, 5], "deviat": 0, "null": [0, 8], "diustribut": 0, "mean": [0, 5], "0": [0, 5, 6, 7, 9], "5": [0, 4, 8], "get_metr": [0, 3], "clf": 0, "x_test": 0, "ndarrai": [0, 2, 6, 9], "y_test": 0, "permute_row": 0, "bool": [0, 2, 6, 7, 8], "true": [0, 2, 7, 8], "includ": [0, 3], "advantag": 0, "mia": [0, 8], "binari": 0, "implement": [0, 1, 2, 4, 8], "definit": 0, "4": 0, "http": [0, 3], "arxiv": 0, "org": [0, 3], "pdf": 0, "1709": 0, "01604": 0, "which": [0, 5, 7, 9], "i": [0, 1, 2, 3, 5, 6, 7, 8, 9], "also": [0, 3], "tensorflow": [0, 7, 8], "privaci": [0, 2, 6, 7, 8, 9], "github": 0, "com": 0, "sklearn": [0, 2, 5, 6], "model": [0, 2, 3, 4, 6, 7, 8, 9], "train": [0, 7, 8], "np": [0, 2], "test": [0, 2, 6, 8], "data": [0, 3, 5, 6, 8], "matrix": 0, "label": [0, 5, 7], "dict": [0, 2, 6, 7, 8, 9], "dictionari": [0, 8], "note": [0, 5, 7, 8, 9], "follow": [0, 5], "rate": 0, "recal": 0, "tpr": 0, "fals": [0, 2, 7, 8], "fpr": 0, "proport": 0, "incorrectli": 0, "classifi": [0, 6, 7, 8, 9], "alarm": 0, "far": 0, "object": [0, 2, 8], "ar": [0, 2, 4, 5, 8], "incorrect": 0, "known": 0, "discoveri": 0, "neag": 0, "tnr": 0, "predict": 0, "precis": 0, "ppv": 0, "npv": 0, "fnr": 0, "accuraci": [0, 7], "acc": 0, "f1": 0, "score": 0, "harmon": 0, "method": [0, 3, 4, 5, 6, 7, 8, 9], "extrem": 0, "case": [0, 8], "mia_extremecas": 0, "min_max_disc": [0, 3], "y_true": 0, "pred_prob": 0, "x_prop": 0, "1": [0, 3, 4, 5, 6, 8, 9], "log_p": 0, "non": [0, 7], "averag": 0, "consid": [0, 7], "actual": [0, 7], "frequenc": 0, "membership": [0, 8], "amongst": 0, "sampl": [0, 7], "highest": 0, "lowest": 0, "assess": 0, "probabl": 0, "If": [0, 8], "confid": [0, 4], "assert": 0, "member": 0, "cannot": [0, 7, 8], "tell": 0, "remain": 0, "90": 0, "flag": 0, "thi": [0, 1, 2, 3, 7, 8, 9], "behaviour": 0, "mai": [0, 2, 4, 8], "sinc": [0, 7, 8], "differ": [0, 2], "noisi": 0, "against": 0, "independ": 0, "essenti": 0, "random": [0, 9], "us": [0, 1, 2, 4, 5, 7, 8], "usual": 0, "gaussian": 0, "approxim": 0, "binomi": 0, "low": 0, "high": 0, "success": 0, "some": [0, 2, 5, 7], "y": [0, 2, 5, 6, 7, 8, 9], "yp": 0, "monoton": 0, "transform": 0, "probabilti": 0, "xprop": 0, "logp": 0, "convert": 0, "log": [0, 8], "maxd": 0, "individu": 0, "mind": 0, "mmd": 0, "between": [0, 5], "pval": 0, "correspond": 0, "hypothesi": 0, "variabl": [0, 5, 7], "choic": 0, "2": [0, 6, 7, 8, 9], "100": [0, 5], "rand": 0, "min_max_desc": 0, "worst_case_attack": 0, "py": [0, 2, 5, 7], "worst": [0, 8], "base": [0, 2, 3, 9], "upon": 0, "store": [0, 2, 5, 6, 8, 9], "two": [0, 6, 7, 8], "csv": [0, 5], "file": [0, 3, 5, 7, 8], "class": [0, 3, 6, 7, 9], "worstcaseattack": [0, 3], "arg": [0, 7], "worstcaseattackarg": [0, 3], "wrap": 0, "dataset": [0, 5, 8], "target_model": 0, "baseestim": 0, "none": [0, 2, 6, 7, 8, 9], "programmat": 0, "entri": [0, 5], "point": [0, 8], "To": [0, 7, 8], "when": [0, 8], "ha": [0, 3, 4, 5, 7, 8, 9], "access": [0, 3], "target": [0, 5], "inherit": [0, 2], "from": [0, 2, 3, 7, 8, 9], "attack_from_prediction_fil": 0, "start": [0, 3], "save": [0, 4, 7, 8], "onli": [0, 7, 8], "avail": [0, 5, 6, 7, 9], "filenam": [0, 8], "specifi": [0, 8], "argument": 0, "provid": [0, 4, 7], "constructor": [0, 7, 8], "attack_from_pr": 0, "train_pr": 0, "test_pr": 0, "param": [0, 2, 4, 7], "self": [0, 2, 8], "arrai": 0, "One": 0, "row": [0, 5], "per": 0, "one": [0, 2, 7], "column": [0, 5], "e": [0, 2, 5, 6, 8], "generate_arrai": 0, "n_rows_in": 0, "n_rows_out": 0, "train_beta": 0, "test_beta": 0, "numpi": 0, "gener": 0, "baselin": 0, "out": [0, 5], "beta": 0, "beta_valu": 0, "n_row": 0, "x": [0, 2, 5, 6, 7, 8, 9], "make_dummy_data": 0, "make": [0, 2, 7, 8], "dummi": 0, "function": [0, 3, 7, 8], "command": 0, "line": [0, 3], "noth": 0, "make_report": 0, "creat": [0, 2, 7, 8], "output": [0, 7, 8], "structur": [0, 3, 6, 8], "run_attack_rep": 0, "list": [0, 2, 7, 8], "rep": 0, "mia_metr": 0, "each": [0, 6, 9], "repetit": 0, "kwarg": [0, 2, 6, 7, 9], "get_arg": 0, "set_param": 0, "kei": [0, 2, 8], "hashabl": 0, "ani": [0, 3, 6, 7, 8, 9], "set": [0, 5, 7, 8, 9], "main": [0, 2, 3, 5], "pars": 0, "invok": 0, "relev": [0, 8], "automat": [0, 2, 5, 7], "report": [0, 4, 7, 8], "numpyarrayencod": [0, 3], "skipkei": 0, "ensure_ascii": 0, "check_circular": 0, "allow_nan": 0, "sort_kei": 0, "indent": 0, "separ": [0, 8], "default": [0, 7, 8], "json": [0, 3, 4, 8], "encod": [0, 8], "cope": 0, "o": 0, "create_json_report": [0, 3], "format": [0, 2, 5, 7, 8], "injest": 0, "other": [0, 2], "tool": 0, "create_lr_report": [0, 3], "todo": 0, "create_mia_report": [0, 3], "attack_output": 0, "fpdf": 0, "infer": [0, 8], "metadata": 0, "dummy_metr": 0, "dummy_metadata": 0, "experi": 0, "document": 0, "text": 0, "border": 0, "font_siz": 0, "11": 0, "font_styl": 0, "font": 0, "arial": 0, "write": [0, 3, 7, 8], "block": [0, 9], "subtitl": [0, 3], "10": [0, 5], "12": 0, "b": 0, "titl": [0, 3], "24": 0, "likelihood": [0, 8], "scenario": 0, "2112": 0, "03570": 0, "likelihood_attack": 0, "dummyclassifi": [0, 3], "A": [0, 1, 5, 8], "allow": [0, 4, 7], "work": [0, 3, 5], "test_x": 0, "depend": [0, 2, 8], "second": 0, "predict_proba": 0, "simpli": 0, "liraattack": [0, 3], "liraattackarg": [0, 3], "The": [0, 3, 4, 5, 6, 7, 8, 9], "lira": [0, 8], "instanc": [0, 7], "need": [0, 2, 7, 8], "have": [0, 2, 5, 8], "x_train": 0, "y_train": 0, "target_mod": 0, "interfac": 0, "fit": [0, 3, 4, 6, 7, 8, 9], "attack_from_config": 0, "tun": 0, "report_nam": 0, "inform": 0, "contain": [0, 2, 5, 8], "all": [0, 5, 7], "run_scenario_from_pr": 0, "shadow_clf": 0, "x_target_train": 0, "iter": 0, "y_target_train": 0, "target_train_pr": 0, "x_shadow_train": 0, "y_shadow_train": 0, "shadow_train_pr": 0, "offlin": 0, "version": [0, 2, 7, 8, 9], "see": 0, "6": 0, "top": 0, "detail": [0, 1, 4], "form": [0, 7, 8], "shadow": 0, "hyper": 0, "should": [0, 2, 7, 8], "been": [0, 3, 5, 7, 8, 9], "wa": [0, 3, 7, 8, 9], "were": 0, "produc": [0, 7], "mia_scor": 0, "belong": 0, "mia_label": 0, "mia_cl": 0, "directli": [0, 8], "compat": 0, "load_breast_canc": 0, "return_x_i": 0, "as_fram": 0, "train_x": 0, "train_i": 0, "test_i": 0, "train_test_split": 0, "test_siz": 0, "stratifi": 0, "rf": 0, "randomforestclassifi": 0, "min_samples_leaf": [0, 2, 4, 8], "min_samples_split": [0, 2], "mia_test_prob": 0, "mia_test_label": 0, "mia_clf": 0, "likelihood_scenario": 0, "max_depth": [0, 2], "n_shadow_model": 0, "setup_example_data": 0, "config": 0, "intend": 0, "user": [0, 4, 5, 7, 8], "thei": [0, 2, 5], "would": [0, 9], "setup": 0, "own": [0, 7], "explor": 1, "benefit": [1, 9], "safemodel": [1, 3, 6, 7, 8, 9], "decis": [1, 2, 6], "tree": [1, 2, 6, 9], "guid": 1, "packag": [2, 4], "open": [2, 4], "wrapper": [2, 4, 7, 8], "common": [2, 4, 5], "machin": [2, 4, 8], "learn": [2, 4, 8], "It": [2, 4], "comment": 2, "numpydoc": 2, "so": 2, "render": 2, "step": 2, "new": 2, "new_model_templ": 2, "basic": 2, "cp": 2, "xgboost": 2, "safegradientboost": 2, "gradientboostingclassifi": 2, "protect": [2, 6, 7, 8, 9], "safe": [2, 8], "limit": [2, 7], "pearamet": 2, "written": 2, "javascript": 2, "notat": 2, "newli": [2, 7], "reflect": 2, "content": [2, 8], "basemodel_paramnam": 2, "safemodeltomakesaf": 2, "def": 2, "appli": [2, 8], "constraint": [2, 8], "edit": 2, "just": [2, 8], "valid": 2, "you": 2, "the_kwd": 2, "val": [2, 8], "modeltomakesaf": 2, "model_typ": [2, 4, 8], "str": [2, 5, 6, 7, 8, 9], "super": [2, 8], "preliminary_check": [2, 8], "apply_constraint": [2, 8], "verbos": [2, 7, 8], "model_save_fil": [2, 4], "base_estimator_": 2, "examine_seperately_item": 2, "base_estim": 2, "estimators_": 2, "For": 2, "extract": 2, "man": 2, "page": [2, 3], "saferandomforest": [2, 3], "n_estim": 2, "criterion": 2, "min_weight_fraction_leaf": 2, "max_featur": 2, "max_leaf_nod": 2, "min_impurity_decreas": 2, "bootstrap": 2, "oob_scor": 2, "n_job": 2, "random_st": 2, "warm_start": 2, "class_weight": 2, "ccp_alpha": 2, "max_sampl": 2, "datastructur": [2, 8], "care": 2, "taken": 2, "ensur": 2, "chang": [2, 7, 8], "after": 2, "call": [2, 4, 7, 8, 9], "handl": 2, "safedecisiontre": [2, 3], "do": [2, 4, 5, 6, 7, 9], "k_anonym": 2, "get_k_anonym": [2, 9], "saved_model": [2, 8], "deepcopi": 2, "__dict__": [2, 8], "In": 2, "doc": 2, "directori": 2, "exist": [2, 8], "rst": 2, "Then": 2, "must": [2, 4], "index": [2, 3], "although": 2, "extens": [2, 8], "requir": [2, 5], "g": [2, 6, 8], "link": 2, "cd": 2, "corefunction": 2, "suit": 2, "ai": [2, 5], "sdc": [2, 5], "being": 2, "more": [2, 4, 8], "helpfunct": 2, "safekera": [2, 3, 7], "help": 2, "specif": [2, 3, 6, 8, 9], "neural": 2, "network": 2, "same_weight": [2, 3, 7], "m1": [2, 7], "m2": [2, 7], "len": 2, "layer": [2, 7], "numlay": 2, "rang": [2, 8], "m1layer": 2, "get_weight": 2, "m2layer": 2, "f": 2, "same": [2, 7, 8, 9], "size": [2, 9], "dim": 2, "m1d": 2, "m2d": 2, "print": 2, "type": [2, 6, 8], "shape": [2, 7], "array_equ": 2, "dimens": 2, "weight": [2, 7], "match": 2, "introduct": 3, "what": 3, "preprocess": 3, "datanotavail": [3, 5], "unknowndataset": [3, 5], "get_data_sklearn": [3, 5], "attack": [3, 7, 8], "check_equ": [3, 8], "check_max": [3, 8], "check_min": [3, 8], "check_typ": [3, 8], "safedecisiontreeclassifi": [3, 6], "decision_tree_internal_trees_are_equ": [3, 6], "decision_trees_are_equ": [3, 6], "get_tree_k_anonym": [3, 6], "saferandomforestclassifi": [3, 8, 9], "safekerasmodel": 3, "check_dp_us": [3, 7], "check_checkpoint_equ": [3, 7], "check_optimizer_allow": [3, 7], "check_optimizer_is_dp": [3, 7], "load_safe_keras_model": [3, 7], "same_config": [3, 7], "full": 3, "length": 3, "tutori": 3, "quick": 3, "notebook": [3, 6, 7, 9], "safesvc": 3, "extend": 3, "modular": 3, "design": [3, 4], "copi": [3, 7, 8], "templat": 3, "defin": [3, 8, 9], "safer": 3, "updat": [3, 7], "rule": [3, 8], "__init__": [3, 8], "paramnam": 3, "ignore_item": [3, 8], "examine_separ": [3, 8], "item": [3, 6, 8], "add": 3, "check": [3, 6, 7, 8, 9], "unusu": 3, "overrid": [3, 7], "sphinx": 3, "pytest": 3, "confirm": 3, "core": 3, "option": [3, 7, 8], "helper": 3, "modul": [3, 7, 8], "search": 3, "uk": 3, "research": [3, 4, 8], "innov": 3, "grant": 3, "mc_pc_21033": 3, "part": 3, "phase": 3, "dare": 3, "analyt": 3, "environ": [3, 4], "programm": 3, "dareuk": 3, "deliv": 3, "partnership": 3, "hdr": 3, "adruk": 3, "project": [3, 5], "guidelin": 3, "resourc": 3, "trust": [3, 4], "graimatt": 3, "support": [3, 7], "mrc": 3, "epsrc": 3, "mr": 3, "s010351": 3, "pictur": 3, "tre": [4, 8], "where": [4, 8], "disclosur": [4, 8], "control": 4, "aim": 4, "give": 4, "greater": 4, "compliant": 4, "feedback": [4, 7], "through": 4, "parseabl": 4, "checkfil": 4, "andi": 4, "decisiontreeclassifi": [4, 6], "unsaf": [4, 7], "pkl": [4, 8], "warn": [4, 7, 8], "present": [4, 8], "risk": [4, 8], "n": 4, "para": 4, "meter": 4, "identifi": [4, 8], "less": [4, 8], "than": [4, 8], "recommend": [4, 7, 8], "min": [4, 8], "releas": 4, "reason": 4, "eter": 4, "error": 4, "delet": 4, "recommendat": 4, "ion": 4, "loader": 5, "handler": 5, "pull": 5, "perform": 5, "appropri": [5, 7, 8], "pre": 5, "process": 5, "except": 5, "rais": 5, "ask": 5, "download": 5, "pass": 5, "name": [5, 7, 8], "we": [5, 7, 8], "don": 5, "t": 5, "recognis": 5, "dataset_nam": 5, "data_fold": 5, "home": 5, "runner": 5, "datafram": 5, "sensibl": 5, "panda": 5, "load": [5, 7], "local": 5, "pd": 5, "input": [5, 7], "singl": [5, 8], "mimic2": 5, "iaccd": 5, "hospit": 5, "mortal": 5, "medic": 5, "mnist": 5, "ab": 5, "v": 5, "br": 5, "500": 5, "indian": 5, "liver": 5, "texa": 5, "synth": 5, "ae": 5, "small": 5, "nurseri": 5, "iri": 5, "box": 5, "via": [5, 8], "normalis": 5, "ad": [5, 7], "prefix": 5, "standardis": 5, "zero": 5, "unit": 5, "varianc": 5, "minmax": 5, "round": 5, "continu": 5, "featur": [5, 6, 9], "3dp": 5, "These": [5, 8], "nest": 5, "python": [6, 7, 8, 9], "here": [6, 7, 9], "attribut": [6, 7, 8, 9], "feature_importances_": [6, 9], "import": [6, 9], "n_features_": [6, 9], "deprec": [6, 7, 9], "remov": [6, 9], "additional_check": [6, 8, 9], "curr_separ": [6, 8, 9], "saved_separ": [6, 8, 9], "k": [6, 9], "anonym": [6, 9], "tree1_tre": 6, "tree2_tre": 6, "equal": [6, 8], "intern": 6, "_tree": 6, "threshold": 6, "node": [6, 7], "etc": 6, "tree1": 6, "tree2": 6, "compar": [6, 7, 8], "estim": 6, "thetre": 6, "smallest": 6, "leaf": [6, 9], "jim": 7, "smith": 7, "andrew": 7, "mccarti": 7, "richard": 7, "preen": 7, "uw": 7, "2022": 7, "around": 7, "tf": 7, "kera": [7, 8], "8": 7, "disabl": 7, "pylont": 7, "about": 7, "necessarili": 7, "complex": [7, 8], "activity_regular": 7, "regular": 7, "compute_dtyp": 7, "dtype": 7, "": 7, "distribute_strategi": 7, "distribut": 7, "strategi": 7, "under": 7, "dtype_polici": 7, "polici": 7, "associ": 7, "dynam": 7, "whether": [7, 8], "eager": 7, "inbound_nod": 7, "api": 7, "upstream": 7, "retriev": 7, "tensor": 7, "input_mask": 7, "mask": 7, "input_shap": 7, "input_spec": 7, "inputspec": 7, "describ": [7, 8], "loss": 7, "add_loss": 7, "compil": 7, "add_metr": 7, "metrics_nam": 7, "displai": 7, "string": [7, 8], "name_scop": 7, "non_trainable_vari": 7, "sequenc": 7, "trainabl": 7, "its": 7, "submodul": 7, "non_trainable_weight": 7, "track": 7, "outbound_nod": 7, "downstream": 7, "output_mask": 7, "output_shap": 7, "run_eagerli": 7, "settabl": 7, "indic": [7, 8], "eagerli": 7, "state_upd": 7, "NOT": 7, "state": 7, "sub": 7, "supports_mask": 7, "compute_mask": 7, "trainable_vari": 7, "trainable_weight": 7, "variable_dtyp": 7, "alia": 7, "__call__": 7, "reset_st": 7, "check_epsilon": 7, "num_sampl": 7, "batch_siz": 7, "epoch": 7, "level": [7, 8], "guarante": 7, "within": [7, 8], "optim": [7, 8], "categorical_crossentropi": 7, "replac": 7, "optimis": 7, "dp": 7, "variant": 7, "necessari": 7, "opt": 7, "becaus": 7, "explicitli": 7, "deal": [7, 8], "dp_epsilon_met": 7, "num_exampl": 7, "epsilon": 7, "suffici": 7, "differenti": 7, "validation_data": 7, "refine_epsilon": 7, "extra": 7, "record": [7, 9], "ii": 7, "doe": 7, "iia": 7, "without": [7, 8], "iii": 7, "iv": 7, "final": 7, "posthoc_check": [7, 8], "last": [7, 8], "meet": 7, "undefin": [7, 8], "No": [7, 8], "deliber": [7, 8], "exclud": [7, 8], "prevent": [7, 8], "possibl": [7, 8], "restart": [7, 8], "thu": [7, 8], "back": [7, 8], "door": [7, 8], "v1": 7, "v2": 7, "checkpoint": 7, "save_model": 7, "On": 7, "assumpt": 7, "go": 7, "frozen": 7, "architectur": 7, "our": 7, "white": 7, "read": [7, 8], "could": 7, "offer": 7, "haveth": 7, "net": 7, "prototyp": 8, "saferfmodel": 8, "request_releas": 8, "comparison": 8, "ignor": 8, "examine_separately_item": 8, "examin": 8, "id": 8, "__apply_constraint": 8, "oper": 8, "cur_val": 8, "__check_model_param": 8, "current": 8, "violat": 8, "fix": 8, "__check_model_param_and": 8, "logic": 8, "AND": 8, "__check_model_param_or": 8, "OR": 8, "__get_constraint": 8, "get": 8, "master": 8, "__str__": 8, "descript": 8, "especi": 8, "usernam": 8, "__weakref__": 8, "weak": 8, "refer": 8, "placehold": 8, "addit": 8, "posthoc": 8, "msg": 8, "messag": 8, "disclos": 8, "boolean": 8, "potenti": 8, "sure": 8, "examine_seperate_item": 8, "curr_val": 8, "saved_v": 8, "both": 8, "get_current_and_saved_model": 8, "split": 8, "get_param": 8, "deep": 8, "restrict": 8, "those": 8, "expect": 8, "interf": 8, "determin": 8, "increas": 8, "upheld": 8, "data_obj": 8, "checker": 8, "dataobj": 8, "filebase_data": 8, "filebas": 8, "never": [8, 9], "held": 8, "clearli": 8, "mst": 8, "leav": 8, "run_attack": 8, "filebase_attack_r": 8, "attack_nam": 8, "worst_cas": 8, "filebasenam": 8, "meta": 8, "result": 8, "ratio": 8, "overload": 8, "safekerasclassif": 8, "maximum": 8, "minimum": [8, 9], "forest": 9, "impur": 9, "refactor": 9, "simpler": 9, "perhap": 9, "That": 9, "appear": 9, "everi": 9}, "objects": {"aisdc.attacks": [[0, 0, 0, "-", "likelihood_attack"], [0, 0, 0, "-", "metrics"], [0, 0, 0, "-", "mia_extremecase"], [0, 0, 0, "-", "report"], [0, 0, 0, "-", "worst_case_attack"]], "aisdc.attacks.likelihood_attack": [[0, 1, 1, "", "DummyClassifier"], [0, 1, 1, "", "LIRAAttack"], [0, 1, 1, "", "LIRAAttackArgs"], [0, 3, 1, "", "main"]], "aisdc.attacks.likelihood_attack.DummyClassifier": [[0, 2, 1, "", "predict"], [0, 2, 1, "", "predict_proba"]], "aisdc.attacks.likelihood_attack.LIRAAttack": [[0, 2, 1, "", "attack"], [0, 2, 1, "", "attack_from_config"], [0, 2, 1, "", "example"], [0, 2, 1, "", "make_report"], [0, 2, 1, "", "run_scenario_from_preds"], [0, 2, 1, "", "setup_example_data"]], "aisdc.attacks.likelihood_attack.LIRAAttackArgs": [[0, 2, 1, "", "get_args"], [0, 2, 1, "", "set_param"]], "aisdc.attacks.metrics": [[0, 3, 1, "", "auc_p_val"], [0, 3, 1, "", "get_metrics"]], "aisdc.attacks.mia_extremecase": [[0, 3, 1, "", "min_max_disc"]], "aisdc.attacks.report": [[0, 1, 1, "", "NumpyArrayEncoder"], [0, 3, 1, "", "create_json_report"], [0, 3, 1, "", "create_lr_report"], [0, 3, 1, "", "create_mia_report"], [0, 3, 1, "", "line"], [0, 3, 1, "", "subtitle"], [0, 3, 1, "", "title"]], "aisdc.attacks.report.NumpyArrayEncoder": [[0, 2, 1, "", "default"]], "aisdc.attacks.worst_case_attack": [[0, 1, 1, "", "WorstCaseAttack"], [0, 1, 1, "", "WorstCaseAttackArgs"], [0, 3, 1, "", "main"]], "aisdc.attacks.worst_case_attack.WorstCaseAttack": [[0, 2, 1, "", "attack"], [0, 2, 1, "", "attack_from_prediction_files"], [0, 2, 1, "", "attack_from_preds"], [0, 2, 1, "", "generate_arrays"], [0, 2, 1, "", "make_dummy_data"], [0, 2, 1, "", "make_report"], [0, 2, 1, "", "run_attack_reps"]], "aisdc.attacks.worst_case_attack.WorstCaseAttackArgs": [[0, 2, 1, "", "get_args"], [0, 2, 1, "", "set_param"]], "aisdc.preprocessing": [[5, 0, 0, "-", "loaders"]], "aisdc.preprocessing.loaders": [[5, 4, 1, "", "DataNotAvailable"], [5, 4, 1, "", "UnknownDataset"], [5, 3, 1, "", "get_data_sklearn"]], "aisdc.safemodel.classifiers": [[6, 0, 0, "-", "safedecisiontreeclassifier"], [7, 0, 0, "-", "safekeras"], [9, 0, 0, "-", "saferandomforestclassifier"]], "aisdc.safemodel.classifiers.safedecisiontreeclassifier": [[6, 1, 1, "", "SafeDecisionTreeClassifier"], [6, 3, 1, "", "decision_tree_internal_trees_are_equal"], [6, 3, 1, "", "decision_trees_are_equal"], [6, 3, 1, "", "get_tree_k_anonymity"]], "aisdc.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier": [[6, 2, 1, "", "additional_checks"], [6, 2, 1, "", "fit"]], "aisdc.safemodel.classifiers.safekeras": [[7, 1, 1, "", "SafeKerasModel"], [7, 3, 1, "", "check_DP_used"], [7, 3, 1, "", "check_checkpoint_equality"], [7, 3, 1, "", "check_optimizer_allowed"], [7, 3, 1, "", "check_optimizer_is_DP"], [7, 3, 1, "", "load_safe_keras_model"], [7, 3, 1, "", "same_configs"], [7, 3, 1, "", "same_weights"]], "aisdc.safemodel.classifiers.safekeras.SafeKerasModel": [[7, 2, 1, "", "check_epsilon"], [7, 2, 1, "", "compile"], [7, 2, 1, "", "dp_epsilon_met"], [7, 2, 1, "", "fit"], [7, 2, 1, "", "posthoc_check"], [7, 2, 1, "", "save"]], "aisdc.safemodel.classifiers.saferandomforestclassifier": [[9, 1, 1, "", "SafeRandomForestClassifier"]], "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier": [[9, 2, 1, "", "additional_checks"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "get_k_anonymity"]], "aisdc.safemodel": [[8, 0, 0, "-", "safemodel"]], "aisdc.safemodel.safemodel": [[8, 1, 1, "", "SafeModel"], [8, 3, 1, "", "check_equal"], [8, 3, 1, "", "check_max"], [8, 3, 1, "", "check_min"], [8, 3, 1, "", "check_type"]], "aisdc.safemodel.safemodel.SafeModel": [[8, 2, 1, "", "__apply_constraints"], [8, 2, 1, "", "__check_model_param"], [8, 2, 1, "", "__check_model_param_and"], [8, 2, 1, "", "__check_model_param_or"], [8, 2, 1, "", "__get_constraints"], [8, 2, 1, "", "__init__"], [8, 2, 1, "", "__str__"], [8, 5, 1, "", "__weakref__"], [8, 2, 1, "", "additional_checks"], [8, 2, 1, "", "examine_seperate_items"], [8, 2, 1, "", "get_current_and_saved_models"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "posthoc_check"], [8, 2, 1, "", "preliminary_check"], [8, 2, 1, "", "request_release"], [8, 2, 1, "", "run_attack"], [8, 2, 1, "", "save"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"attack": 0, "exampl": 1, "safedecisiontre": [1, 6], "full": 1, "length": 1, "tutori": 1, "saferandomforest": [1, 9], "quick": 1, "start": 1, "notebook": 1, "safesvc": 1, "safekera": 1, "extend": 2, "safemodel": [2, 4], "modular": 2, "design": 2, "copi": 2, "The": 2, "templat": 2, "defin": 2, "safer": 2, "class": [2, 8], "updat": 2, "rule": 2, "json": 2, "file": 2, "__init__": 2, "method": 2, "paramnam": 2, "ignore_item": 2, "examine_separ": 2, "item": 2, "add": 2, "check": 2, "ani": 2, "unusu": 2, "data": 2, "structur": 2, "overrid": 2, "fit": 2, "function": 2, "sphinx": 2, "document": [2, 3], "write": 2, "pytest": 2, "confirm": 2, "core": 2, "includ": 2, "option": 2, "helper": 2, "welcom": 3, "ai": 3, "sdc": 3, "api": 3, "refer": 3, "content": 3, "indic": 3, "tabl": 3, "fund": 3, "statement": 3, "introduct": 4, "what": 4, "i": 4, "preprocess": 5, "safekerasmodel": 7, "base": 8}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Attacks": [[0, "attacks"]], "Examples": [[1, "examples"]], "SafeDecisionTree Full Length Tutorial": [[1, "safedecisiontree-full-length-tutorial"]], "SafeRandomForest Quick Start Notebook": [[1, "saferandomforest-quick-start-notebook"]], "SafeSVC Quick Start Notebook": [[1, "safesvc-quick-start-notebook"]], "SafeKeras Quick Start Notebook": [[1, "safekeras-quick-start-notebook"]], "Extending SafeModel": [[2, "extending-safemodel"]], "Modular Design": [[2, "modular-design"]], "Copy The Template": [[2, "copy-the-template"]], "Define the Safer Class": [[2, "define-the-safer-class"]], "Update rules.json file": [[2, "update-rules-json-file"]], "Update the __init__ method with paramnames, ignore_items, and examine_separately items": [[2, "update-the-init-method-with-paramnames-ignore-items-and-examine-separately-items"]], "Add checks for any unusual data structures": [[2, "add-checks-for-any-unusual-data-structures"]], "Override the fit() function": [[2, "override-the-fit-function"]], "Update Sphinx documentation": [[2, "update-sphinx-documentation"]], "Write pytests to confirm core functionality": [[2, "write-pytests-to-confirm-core-functionality"]], "Include any optional helper functions": [[2, "include-any-optional-helper-functions"]], "Welcome to the AI-SDC documentation!": [[3, "welcome-to-the-ai-sdc-documentation"]], "API Reference": [[3, "api-reference"]], "Contents:": [[3, null]], "Indices and tables": [[3, "indices-and-tables"]], "Funding Statement": [[3, "funding-statement"]], "Introduction": [[4, "introduction"]], "What is safemodel?": [[4, "what-is-safemodel"]], "Preprocessing": [[5, "module-aisdc.preprocessing.loaders"]], "SafeDecisionTree": [[6, "safedecisiontree"]], "SafeKerasModel": [[7, "safekerasmodel"]], "Base Class": [[8, "module-aisdc.safemodel.safemodel"]], "SafeRandomForest": [[9, "saferandomforest"]]}, "indexentries": {"dummyclassifier (class in aisdc.attacks.likelihood_attack)": [[0, "aisdc.attacks.likelihood_attack.DummyClassifier"]], "liraattack (class in aisdc.attacks.likelihood_attack)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack"]], "liraattackargs (class in aisdc.attacks.likelihood_attack)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttackArgs"]], "numpyarrayencoder (class in aisdc.attacks.report)": [[0, "aisdc.attacks.report.NumpyArrayEncoder"]], "worstcaseattack (class in aisdc.attacks.worst_case_attack)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack"]], "worstcaseattackargs (class in aisdc.attacks.worst_case_attack)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttackArgs"]], "aisdc.attacks.likelihood_attack": [[0, "module-aisdc.attacks.likelihood_attack"]], "aisdc.attacks.metrics": [[0, "module-aisdc.attacks.metrics"]], "aisdc.attacks.mia_extremecase": [[0, "module-aisdc.attacks.mia_extremecase"]], "aisdc.attacks.report": [[0, "module-aisdc.attacks.report"]], "aisdc.attacks.worst_case_attack": [[0, "module-aisdc.attacks.worst_case_attack"]], "attack() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.attack"]], "attack() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.attack"]], "attack_from_config() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.attack_from_config"]], "attack_from_prediction_files() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.attack_from_prediction_files"]], "attack_from_preds() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.attack_from_preds"]], "auc_p_val() (in module aisdc.attacks.metrics)": [[0, "aisdc.attacks.metrics.auc_p_val"]], "create_json_report() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.create_json_report"]], "create_lr_report() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.create_lr_report"]], "create_mia_report() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.create_mia_report"]], "default() (aisdc.attacks.report.numpyarrayencoder method)": [[0, "aisdc.attacks.report.NumpyArrayEncoder.default"]], "example() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.example"]], "generate_arrays() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.generate_arrays"]], "get_args() (aisdc.attacks.likelihood_attack.liraattackargs method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttackArgs.get_args"]], "get_args() (aisdc.attacks.worst_case_attack.worstcaseattackargs method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttackArgs.get_args"]], "get_metrics() (in module aisdc.attacks.metrics)": [[0, "aisdc.attacks.metrics.get_metrics"]], "line() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.line"]], "main() (in module aisdc.attacks.likelihood_attack)": [[0, "aisdc.attacks.likelihood_attack.main"]], "main() (in module aisdc.attacks.worst_case_attack)": [[0, "aisdc.attacks.worst_case_attack.main"]], "make_dummy_data() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.make_dummy_data"]], "make_report() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.make_report"]], "make_report() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.make_report"]], "min_max_disc() (in module aisdc.attacks.mia_extremecase)": [[0, "aisdc.attacks.mia_extremecase.min_max_disc"]], "module": [[0, "module-aisdc.attacks.likelihood_attack"], [0, "module-aisdc.attacks.metrics"], [0, "module-aisdc.attacks.mia_extremecase"], [0, "module-aisdc.attacks.report"], [0, "module-aisdc.attacks.worst_case_attack"], [5, "module-aisdc.preprocessing.loaders"], [6, "module-aisdc.safemodel.classifiers.safedecisiontreeclassifier"], [7, "module-aisdc.safemodel.classifiers.safekeras"], [8, "module-aisdc.safemodel.safemodel"], [9, "module-aisdc.safemodel.classifiers.saferandomforestclassifier"]], "predict() (aisdc.attacks.likelihood_attack.dummyclassifier method)": [[0, "aisdc.attacks.likelihood_attack.DummyClassifier.predict"]], "predict_proba() (aisdc.attacks.likelihood_attack.dummyclassifier method)": [[0, "aisdc.attacks.likelihood_attack.DummyClassifier.predict_proba"]], "run_attack_reps() (aisdc.attacks.worst_case_attack.worstcaseattack method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttack.run_attack_reps"]], "run_scenario_from_preds() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.run_scenario_from_preds"]], "set_param() (aisdc.attacks.likelihood_attack.liraattackargs method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttackArgs.set_param"]], "set_param() (aisdc.attacks.worst_case_attack.worstcaseattackargs method)": [[0, "aisdc.attacks.worst_case_attack.WorstCaseAttackArgs.set_param"]], "setup_example_data() (aisdc.attacks.likelihood_attack.liraattack method)": [[0, "aisdc.attacks.likelihood_attack.LIRAAttack.setup_example_data"]], "subtitle() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.subtitle"]], "title() (in module aisdc.attacks.report)": [[0, "aisdc.attacks.report.title"]], "datanotavailable": [[5, "aisdc.preprocessing.loaders.DataNotAvailable"]], "unknowndataset": [[5, "aisdc.preprocessing.loaders.UnknownDataset"]], "aisdc.preprocessing.loaders": [[5, "module-aisdc.preprocessing.loaders"]], "get_data_sklearn() (in module aisdc.preprocessing.loaders)": [[5, "aisdc.preprocessing.loaders.get_data_sklearn"]], "safedecisiontreeclassifier (class in aisdc.safemodel.classifiers.safedecisiontreeclassifier)": [[6, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier"]], "additional_checks() (aisdc.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[6, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.additional_checks"]], "aisdc.safemodel.classifiers.safedecisiontreeclassifier": [[6, "module-aisdc.safemodel.classifiers.safedecisiontreeclassifier"]], "decision_tree_internal_trees_are_equal() (in module aisdc.safemodel.classifiers.safedecisiontreeclassifier)": [[6, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.decision_tree_internal_trees_are_equal"]], "decision_trees_are_equal() (in module aisdc.safemodel.classifiers.safedecisiontreeclassifier)": [[6, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.decision_trees_are_equal"]], "fit() (aisdc.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[6, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.fit"]], "get_tree_k_anonymity() (in module aisdc.safemodel.classifiers.safedecisiontreeclassifier)": [[6, "aisdc.safemodel.classifiers.safedecisiontreeclassifier.get_tree_k_anonymity"]], "safekerasmodel (class in aisdc.safemodel.classifiers.safekeras)": [[7, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel"]], "aisdc.safemodel.classifiers.safekeras": [[7, "module-aisdc.safemodel.classifiers.safekeras"]], "check_dp_used() (in module aisdc.safemodel.classifiers.safekeras)": [[7, "aisdc.safemodel.classifiers.safekeras.check_DP_used"]], "check_checkpoint_equality() (in module aisdc.safemodel.classifiers.safekeras)": [[7, "aisdc.safemodel.classifiers.safekeras.check_checkpoint_equality"]], "check_epsilon() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[7, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.check_epsilon"]], "check_optimizer_allowed() (in module aisdc.safemodel.classifiers.safekeras)": [[7, "aisdc.safemodel.classifiers.safekeras.check_optimizer_allowed"]], "check_optimizer_is_dp() (in module aisdc.safemodel.classifiers.safekeras)": [[7, "aisdc.safemodel.classifiers.safekeras.check_optimizer_is_DP"]], "compile() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[7, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.compile"]], "dp_epsilon_met() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[7, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.dp_epsilon_met"]], "fit() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[7, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.fit"]], "load_safe_keras_model() (in module aisdc.safemodel.classifiers.safekeras)": [[7, "aisdc.safemodel.classifiers.safekeras.load_safe_keras_model"]], "posthoc_check() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[7, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.posthoc_check"]], "same_configs() (in module aisdc.safemodel.classifiers.safekeras)": [[7, "aisdc.safemodel.classifiers.safekeras.same_configs"]], "same_weights() (in module aisdc.safemodel.classifiers.safekeras)": [[7, "aisdc.safemodel.classifiers.safekeras.same_weights"]], "save() (aisdc.safemodel.classifiers.safekeras.safekerasmodel method)": [[7, "aisdc.safemodel.classifiers.safekeras.SafeKerasModel.save"]], "safemodel (class in aisdc.safemodel.safemodel)": [[8, "aisdc.safemodel.safemodel.SafeModel"]], "__apply_constraints() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.__apply_constraints"]], "__check_model_param() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.__check_model_param"]], "__check_model_param_and() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.__check_model_param_and"]], "__check_model_param_or() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.__check_model_param_or"]], "__get_constraints() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.__get_constraints"]], "__init__() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.__init__"]], "__str__() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.__str__"]], "__weakref__ (aisdc.safemodel.safemodel.safemodel attribute)": [[8, "aisdc.safemodel.safemodel.SafeModel.__weakref__"]], "additional_checks() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.additional_checks"]], "aisdc.safemodel.safemodel": [[8, "module-aisdc.safemodel.safemodel"]], "check_equal() (in module aisdc.safemodel.safemodel)": [[8, "aisdc.safemodel.safemodel.check_equal"]], "check_max() (in module aisdc.safemodel.safemodel)": [[8, "aisdc.safemodel.safemodel.check_max"]], "check_min() (in module aisdc.safemodel.safemodel)": [[8, "aisdc.safemodel.safemodel.check_min"]], "check_type() (in module aisdc.safemodel.safemodel)": [[8, "aisdc.safemodel.safemodel.check_type"]], "examine_seperate_items() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.examine_seperate_items"]], "get_current_and_saved_models() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.get_current_and_saved_models"]], "get_params() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.get_params"]], "posthoc_check() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.posthoc_check"]], "preliminary_check() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.preliminary_check"]], "request_release() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.request_release"]], "run_attack() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.run_attack"]], "save() (aisdc.safemodel.safemodel.safemodel method)": [[8, "aisdc.safemodel.safemodel.SafeModel.save"]], "saferandomforestclassifier (class in aisdc.safemodel.classifiers.saferandomforestclassifier)": [[9, "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier"]], "additional_checks() (aisdc.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[9, "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.additional_checks"]], "aisdc.safemodel.classifiers.saferandomforestclassifier": [[9, "module-aisdc.safemodel.classifiers.saferandomforestclassifier"]], "fit() (aisdc.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[9, "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.fit"]], "get_k_anonymity() (aisdc.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[9, "aisdc.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_k_anonymity"]]}})